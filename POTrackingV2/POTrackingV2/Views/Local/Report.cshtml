@using PagedList;
@using PagedList.Mvc;
@*@model IEnumerable<POTrackingV2.Models.PO>*@
@model IPagedList<POTrackingV2.Models.PO>
@{
    ViewBag.Title = "Report Delivery Date";

}
@section styles {
    <link href="~/Content/um-style.css" rel="stylesheet" />
    <link href="~/Content/datepicker.min.css" rel="stylesheet" />
}
<div class="um">
    <h1>Report Delivery Date</h1>
    <div class="filter-row">
        @using (Html.BeginForm("Report", "Local", null, FormMethod.Get, new { @class = "" }))
        {
        <div class="filter-form-container form-inline">
            <input id="searchPONumber" name="searchPONumber" list="data-list-ponumber" type="text" class="form-control form-control-lg filter-search with-icon pr-2 mr-md-4 mb-1" placeholder="Search PO Number" autocomplete="off" value="@ViewBag.CurrentSearchPONumber" />
            <datalist id="data-list-ponumber"></datalist>
            <input id="searchVendorName" name="searchVendorName" list="data-list-vendorname" type="text" class="form-control form-control-lg filter-search with-icon pr-2 mr-md-4 mb-1" placeholder="Search Vendor Name" autocomplete="off" value="@ViewBag.CurrentSearchVendorName" />
            <datalist id="data-list-vendorname"></datalist>
            <input id="searchMaterial" name="searchMaterial" list="data-list-material" type="text" class="form-control form-control-lg filter-search with-icon pr-2 mr-md-4 mb-1" placeholder="Search Material" autocomplete="off" value="@ViewBag.CurrentSearchMaterial" />
            <datalist id="data-list-material"></datalist>
            <button type="submit" class="btn btn-info mr-3">Find</button>
            @Html.ActionLink("Clear", "Report", null, new { @class = "btn btn-info mr-3" })
            @Html.ActionLink("Download", "DownloadReport", "Local", new { searchPONumber = ViewBag.CurrentSearchPONumber, searchVendorName = ViewBag.CurrentSearchVendorName, searchMaterial = ViewBag.CurrentSearchMaterial }, new { @class = "btn btn-info" })
        </div>
        }
    </div>

    <table class="table table-striped table-bordered">
        <th>
            PO Number
        </th>
        <th>
            Item Number
        </th>
        <th>
            Material Name
        </th>
        <th>
            Description
        </th>
        <th>
            Quantity
        </th>
        <th>
            Delivery Date
        </th>
        <th>
            Vendor
        </th>
        <th>
            Estimated Time Arrival
        </th>
        </tr>
        @if (Model.Count() == 0)
        {
            <tr>
                <td colspan="12">No rows match search criteria</td>
            </tr>
        }
        else
        {
            foreach (var pO in Model)
            {
                var purchasingDocumentItems = pO.PurchasingDocumentItems.Where(x => !String.IsNullOrEmpty(x.Material) && x.ActiveStage != null && x.ActiveStage != "0" && x.IsClosed != "l" && x.IsClosed != "L" && x.IsClosed != "lx" && x.IsClosed != "LX" && x.PurchasingDocumentItemHistories.All(y => y.POHistoryCategory != "T" && y.POHistoryCategory != "Q"))
                                                                    .OrderBy(x => x.ItemNumber);

                if (purchasingDocumentItems.Count() < 1)
                {
                    continue;
                }

                foreach (var purchasingDocumentItem in purchasingDocumentItems)
                {
                    <tr style="background-color:white;">
                        <td>
                            @Html.DisplayFor(modelItem => purchasingDocumentItem.PO.Number)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => purchasingDocumentItem.ItemNumber)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => purchasingDocumentItem.Material)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => purchasingDocumentItem.Description)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => purchasingDocumentItem.ConfirmedQuantity)
                        </td>
                        <td>
                            @{
                                string deliveryDate = "-";

                                if (purchasingDocumentItem.DeliveryDate != null)
                                {
                                    deliveryDate = purchasingDocumentItem.DeliveryDate.GetValueOrDefault().ToString("dd/MM/yyyy");
                                }
                            }
                            @deliveryDate
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => purchasingDocumentItem.PO.Vendor.Name)
                        </td>
                        <td>
                            @{
                                string eTAConfirmation = "-";

                                if (purchasingDocumentItem.HasETAHistory)
                                {
                                    if (purchasingDocumentItem.ETAHistories.Count < 2)
                                    {
                                        if (purchasingDocumentItem.FirstETAHistory.ETADate != null)
                                        {
                                            eTAConfirmation = purchasingDocumentItem.FirstETAHistory.ETADate.GetValueOrDefault().AddDays(2).ToString("dd/MM/yyyy");
                                        }
                                    }
                                    else
                                    {
                                        if (purchasingDocumentItem.LastETAHistory.ETADate != null)
                                        {
                                            eTAConfirmation = purchasingDocumentItem.LastETAHistory.ETADate.GetValueOrDefault().AddDays(2).ToString("dd/MM/yyyy");
                                        }
                                    }
                                }
                            }
                            @eTAConfirmation
                        </td>
                    </tr>
                }
            }
        }
    </table>
    Page @(Model.PageCount < Model.PageNumber ? 0 : Model.PageNumber) of @Model.PageCount
    @Html.PagedListPager(Model, page => Url.Action("Report",
    new { page, searchPONumber = ViewBag.CurrentSearchPONumber, searchVendorName = ViewBag.CurrentSearchVendorName, searchMaterial = ViewBag.CurrentSearchMaterial, filterBy = ViewBag.CurrentSearchFilterBy, searchStartPODate = ViewBag.CurrentStartPODate, searchEndPODate = ViewBag.CurrentEndPODate }))
</div>
@section scripts {
    <script src="~/Scripts/datepicker.min.js"></script>
    <script type="text/javascript">
        var scrollLength = [];
        $(document).ready(function () {

            //$('#startInspectionDate').datepicker({ autoHide: true });
            //$('#endInspectionDate').datepicker({ autoHide: true, filter: date => { return (new Date($('#startInspectionDate').val()) >= date) ? false : true; } });
            $('.form-date').datepicker({ format: 'dd/mm/YYYY', autoHide: true });

            $(".filter-search").on("keyup focus", function () {
                //poNumber vendor material
                var filterBy = "";
                var list = "";
                var searchData = "";
                if ($(this).attr("name") == "searchPONumber") {
                    filterBy = "poNumber";
                    searchData = $("#searchPONumber");
                    list = "ponumber";
                } else if ($(this).attr("name") == "searchVendorName") {
                    filterBy = "vendor";
                    searchData = $("#searchVendorName");
                    list = "vendorname";
                } else if ($(this).attr("name") == "searchMaterial") {
                    filterBy = "material";
                    searchData = $("#searchMaterial");
                    list = "material";
                }

                $.ajax({
                    type: "GET",
                    url: "@Url.Action("GetDataForSearch", "Local")",
                    data: { 'searchFilterBy': filterBy, 'value': searchData.val() },
                    beforeSend: function () {
                        searchData.css("background", "url(" + siteUrl + "/Images/LoaderIcon.gif) no-repeat 165px");
                    },
                    success: function (response) {
                        if (response.responseCode == "200") {
                            var jsonObjSuggestion = $.parseJSON(response.data);
                            var element = "";
                            //console.log(response.data);
                            for (var k in jsonObjSuggestion) {
                                element += "<option value='" + jsonObjSuggestion[k]['Data'] + "'></option>";
                            }
                            $("#data-list-" + list).html(element);
                            searchData.css("background", "");
                        } else {
                            conole.log(response.responseCode + response.responseText);
                        }
                    },
                    error: function (xhr, status, error) {
                        alert(xhr.status + " : " + error);
                    }
                });
            });
        });
    </script>
}
