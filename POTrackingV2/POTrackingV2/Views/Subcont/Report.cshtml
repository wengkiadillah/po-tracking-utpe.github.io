@using PagedList;
@using PagedList.Mvc;
@*@model IEnumerable<POTracking.Models.SubcontComponentCapability>*@
@model IPagedList<POTrackingV2.Models.PO>
@{
    ViewBag.Title = "Master Vendor";
}
@section styles {
    <link href="~/Content/um-style.css" rel="stylesheet" />
    <link href="~/Content/datepicker.min.css" rel="stylesheet" />
}
<div class="um">
    <h1>Report ETA</h1>
    <div class="filter-row">
        @using (Html.BeginForm("Report", "Subcont", null, FormMethod.Get, new { @class = "" }))
        {
            <div class="filter-form-container form-inline">
                <input id="searchPONumber" name="searchPONumber" list="data-list-po" type="text" class="form-control form-control-lg filter-search with-icon pr-2 mr-md-4 mb-1" placeholder="Search No. PO" autocomplete="off" value="@ViewBag.CurrentDataPONumber" />
                <datalist id="data-list-po"></datalist>
                <input id="searchVendorName" name="searchVendorName" list="data-list-vendor" type="text" class="form-control form-control-lg filter-search with-icon pr-2 mr-md-4 mb-1" placeholder="Search Subcont Name" autocomplete="off" value="@ViewBag.CurrentDataVendorName" />
                <datalist id="data-list-vendor"></datalist>
                <input id="searchMaterial" name="searchMaterial" list="data-list-material" type="text" class="form-control form-control-lg filter-search with-icon pr-2 mr-md-4 mb-1" placeholder="Search Material" autocomplete="off" value="@ViewBag.CurrentDataMaterial" />
                <datalist id="data-list-material"></datalist>
            </div>

            <div class="filter-row subtier mt-0 mb-1">
                <div class="filter-form-container form-inline">
                    <div class="form-group mr-0 ml-0 mb-1">
                        <label for="startInspectionDate">Inspection Date</label>
                        <input name="searchStartInspectionDate" type="text" class="form-control form-control-lg form-date with-icon" id="startInspectionDate"
                               placeholder="dd/mm/yyyy" value="@ViewBag.CurrentStartInspectionDate" autocomplete="off" />
                        <i class="far fa-calendar-alt form-type-icon"></i>
                    </div>
                    <div class="form-group">
                        <label for="endInspectionDate">to</label>
                        <input name="searchEndInspectionDate" type="text" class="form-control form-control-lg form-date with-icon" id="endInspectionDate"
                               placeholder="dd/mm/yyyy" value="@ViewBag.CurrentEndInspectionDate" autocomplete="off" />
                        <i class="far fa-calendar-alt form-type-icon"></i>
                    </div>
                    <button type="submit" class="btn btn-info mr-3">Find</button>
                    @Html.ActionLink("Clear", "Report", null, new { @class = "btn btn-info mr-3" })
                    @Html.ActionLink("Download", "DownloadReport", "Subcont", new { searchPONumber = ViewBag.CurrentDataPONumber, searchVendorName = ViewBag.CurrentDataVendorName, searchMaterial = ViewBag.CurrentDataMaterial, searchStartInspectionDate = ViewBag.CurrentStartInspectionDate, searchEndInspectionDate = ViewBag.CurrentEndInspectionDate }, new { @class = "btn btn-info" })
                </div>
            </div>
        }
    </div>

    <table class="table table-striped table-bordered">
        <tr>
            <th>
                PO No.
            </th>
            <th>
                Item No.
            </th>
            <th>
                Material Name
            </th>
            <th>
                Description
            </th>
            <th>
                Quantity
            </th>
            <th>
                Delivery Date
            </th>
            <th>
                Subcont Name
            </th>
            <th>
                Estimated Inspection Date
            </th>
            <th>
                Estimated Time Arrival
            </th>
        </tr>
        @if (Model.Count() == 0)
        {
            <tr>
                <td colspan="12">No rows match search criteria</td>
            </tr>
        }
        else
        {
            foreach (var pO in Model)
            {
                var purchasingDocumentItems = pO.PurchasingDocumentItems.Where(x => x.PrimerActualDate != null && x.Material != "" && x.Material != null);
                if (!String.IsNullOrEmpty(ViewBag.CurrentDataMaterial))
                {
                    purchasingDocumentItems = purchasingDocumentItems.Where(x=> x.Material.ToLower().Contains(ViewBag.CurrentDataMaterial.ToLower()));
                }

                if (!String.IsNullOrEmpty(ViewBag.CurrentStartInspectionDate))
                {
                    DateTime startDate = DateTime.ParseExact(ViewBag.CurrentStartInspectionDate, "dd/MM/yyyy", System.Globalization.CultureInfo.InvariantCulture);
                    purchasingDocumentItems = purchasingDocumentItems.Where(x => x.PrimerActualDate >= startDate);
                }

                if (!String.IsNullOrEmpty(ViewBag.CurrentEndInspectionDate))
                {
                    DateTime endDate = DateTime.ParseExact(ViewBag.CurrentEndInspectionDate, "dd/MM/yyyy", System.Globalization.CultureInfo.InvariantCulture);

                    purchasingDocumentItems = purchasingDocumentItems.Where(x => x.PrimerActualDate <= endDate);
                }

                //var purchasingDocumentItems = pO.PurchasingDocumentItems;
                foreach (var purchasingDocumentItem in purchasingDocumentItems)
                {
                    <tr style="background-color:white;">
                        <td>
                            @Html.DisplayFor(modelItem => purchasingDocumentItem.PO.Number)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => purchasingDocumentItem.ItemNumber)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => purchasingDocumentItem.Material)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => purchasingDocumentItem.Description)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => purchasingDocumentItem.ConfirmedQuantity)
                        </td>
                        <td>
                            @if (purchasingDocumentItem.DeliveryDate != null)
                            {
                                @purchasingDocumentItem.DeliveryDate.Value.ToString("dd/MM/yyyy");
                            }
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => purchasingDocumentItem.PO.Vendor.Name)
                        </td>
                        <td>
                            @if (purchasingDocumentItem.PrimerActualDate != null)
                            {
                                @purchasingDocumentItem.PrimerActualDate.Value.ToString("dd/MM/yyyy");
                            }
                            @*@Html.DisplayFor(modelItem => purchasingDocumentItem.PrimerActualDate.Value.ToString("dd/MM/yyyy"))*@
                        </td>
                        <td>
                            @if (purchasingDocumentItem.PrimerActualDate != null)
                            {
                                var days = 2;
                                var ETADateNewFormat = "";

                                DateTime? QCDate = purchasingDocumentItem.PrimerActualDate.HasValue ? purchasingDocumentItem.PrimerActualDate.GetValueOrDefault() : (DateTime?)null;
                                DateTime? ETADate = (DateTime?)null;
                                if (QCDate != (DateTime?)null)
                                {
                                    ETADate = QCDate.Value.AddDays(days);
                                    ETADateNewFormat = ETADate.Value.ToString("dd/MM/yyyy");
                                }

                                @ETADateNewFormat;
                            }
                            @*@Html.DisplayFor(modelItem => purchasingDocumentItem.PrimerActualDate.Value.ToString("dd/MM/yyyy"))*@
                        </td>
                    </tr>
                }
            }
        }

    </table>

    Page @(Model.PageCount < Model.PageNumber ? 0 : Model.PageNumber) of @Model.PageCount
    @Html.PagedListPager(Model, page => Url.Action("Report",
    new { page, searchPONumber = ViewBag.CurrentDataPONumber, searchVendorName = ViewBag.CurrentDataVendorName, searchMaterial = ViewBag.CurrentDataMaterial, filterBy = @ViewBag.FilterBy, searchStartInspectionDate = ViewBag.CurrentStartInspectionDate, searchEndInspectionDate = ViewBag.CurrentEndInspectionDate }))

</div>

@section scripts {
    <script src="~/Scripts/datepicker.min.js"></script>
    <script type="text/javascript">
        var scrollLength = [];
        $(document).ready(function () {

            $('#startInspectionDate').datepicker({ format: 'dd/mm/YYYY', autoHide: true });
            $('#endInspectionDate').datepicker({ format: 'dd/mm/YYYY', autoHide: true, filter: date => { return (new Date($('#startInspectionDate').val()) >= date) ? false : true; } });
            $('.form-date').datepicker({ format: 'dd/mm/YYYY', autoHide: true });

            $(".filter-search").on("keyup focus", function () {
                //poNumber vendor material
                var filterBy = "";
                var list = "";
                var searchData = "";
                if ($(this).attr("name") == "searchPONumber") {
                    filterBy = "poNumber";
                    searchData = $("#searchPONumber");
                    list = "po";
                } else if ($(this).attr("name") == "searchVendorName") {
                    filterBy = "vendor";
                    searchData = $("#searchVendorName");
                    list = "vendor";
                } else if ($(this).attr("name") == "searchMaterial") {
                    filterBy = "material";
                    searchData = $("#searchMaterial");
                    list = "material";
                }

                $.ajax({
                    type: "GET",
                    url: "@Url.Action("GetDataFromValue", "Subcont")",
                    data: { 'filterBy': filterBy, 'value': searchData.val() },
                    beforeSend: function () {
                        searchData.css("background", "url(" + siteUrl + "/Images/LoaderIcon.gif) no-repeat 165px");
                    },
                    success: function (response) {
                        if (response.responseCode == "200") {
                            var jsonObjSuggestion = $.parseJSON(response.data);
                            var element = "";
                            //console.log(response.data);
                            for (var k in jsonObjSuggestion) {
                                element += "<option value='" + jsonObjSuggestion[k]['Data'] + "'></option>";
                            }
                            $("#data-list-" + list).html(element);
                            searchData.css("background", "");
                        } else {
                            conole.log(response.responseCode + response.responseText);
                        }
                    },
                    error: function (xhr, status, error) {
                        alert(xhr.status + " : " + error);
                    }
                });
            });
        });
    </script>
}
